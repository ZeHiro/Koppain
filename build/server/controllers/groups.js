// Generated by CoffeeScript 1.6.3
var Group;

Group = require('../models/group');

module.exports.all = function(req, res) {
  return Group.all(function(err, groups) {
    if (err != null) {
      return res.status(500).send({
        error: 'server_error_retrieve_data'
      });
    } else {
      return res.status(200).send(groups);
    }
  });
};

module.exports.create = function(req, res) {
  var group;
  group = req.body;
  console.log(group);
  if (group.people == null) {
    res.status(400).send({
      error: 'missing_parameter: people'
    });
    return;
  }
  if (group.name == null) {
    res.status(400).send({
      error: 'missing_parameter: name'
    });
    return;
  }
  return Group.create(group, function(err, newGroup) {
    if (err != null) {
      res.status(500).send({
        error: 'server_error_create_group'
      });
    } else {
      return res.status(201).send(newGroup);
    }
  });
};

module.exports.update = function(req, res) {
  var group;
  group = req.body;
  if ((group.people == null) && (group.name == null)) {
    res.status(400).send({
      error: 'missing_parameter: people'
    });
    return;
  }
  return Group.exists(req.params.groupID, function(err, IsExist) {
    if (err != null) {
      res.status(500).send({
        error: "server_error: " + err
      });
    } else if (!IsExist) {
      res.status(404).send({
        error: 'group_not_found'
      });
    } else {
      return Group.updateAttributes(req.params.groupID, group, function(err, updatedGroup) {
        if (err != null) {
          res.status(500).send({
            error: "could_not_update: " + err
          });
          return;
        }
        return res.sendStatus(200);
      });
    }
  });
};

module.exports["delete"] = function(req, res) {
  return Group.exists(req.params.groupID, function(err, IsExist) {
    if (err != null) {
      res.status(500).send({
        error: "could_not_find: " + err
      });
    } else if (!IsExist) {
      res.status(404).send({
        error: 'group_not_found'
      });
    } else {
      return Group.destroy(req.params.groupID, function(err) {
        if (err != null) {
          res.status(500).send({
            error: "could_not_delete: " + err
          });
        } else {
          return res.sendStatus(204);
        }
      });
    }
  });
};

module.exports.addmember = function(req, res) {
  return Group.exists(req.params.groupID, function(err, IsExist) {
    if (err != null) {
      res.status(500).send({
        error: "coudld_not_find: " + err
      });
    } else if (!IsExist) {
      return res.send(404).send("group_not_found");
    } else {
      return Group.find(req.params.groupID, function(err, found_group) {
        if (err != null) {
          req.status(500).send({
            error: "coudld_not_find: " + err
          });
        } else {
          found_group.people.push(req.body);
          return Group.updateAttributes(req.params.groupID, found_group, function(err, updated_group) {
            if (err != null) {
              res.status(500).send({
                error: "could_no_update: " + err
              });
            } else {
              return res.sendStatus(200);
            }
          });
        }
      });
    }
  });
};

module.exports.deletemember = function(req, res) {
  return Group.exists(req.params.groupID, function(err, IsExist) {
    if (err != null) {
      res.status(500).send({
        error: "could_not_find: " + err
      });
    } else if (!IsExist) {
      res.status(404).send("group_not_found");
    } else {
      return Group.find(req.params.groupID, function(err, found_group) {
        var member_idx;
        if (err != null) {
          res.status(500).send({
            error: "could_not_find: " + err
          });
        } else {
          member_idx = found_group.indexOf(req.params.memberID);
          if (member_idx !== -1) {
            found_group.splice(member_idx, 1);
            return Goup.updateAttributes(req.params.groupID, found_group, function(err, updated_group) {
              if (err != null) {
                res.status(500).send({
                  error: "could_no_update: " + err
                });
              } else {
                return res.sendStatus(204);
              }
            });
          }
        }
      });
    }
  });
};
